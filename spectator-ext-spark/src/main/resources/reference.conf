
spectator.spark {
  name-patterns = [
    // EXECUTORS
    // 97278898-4bd4-49c2-9889-aa5f969a7816-0013.97278898-4bd4-49c2-9889-aa5f969a7816-S1/2.executor.filesystem.file.largeRead_ops
    {
      pattern = "^([^.]+)\\.(([^.]+)\/)?(\\d+)\\.((executor|jvm|CodeGenerator)\\..*)"
      name = 5
      tags = {
        "appId" = 1
        "agentId" = 3
        "executorId" = 4
      }
    },


    // DRIVER
    // 97278898-4bd4-49c2-9889-aa5f969a7816-0020.driver.BlockManager.memory.remainingMem_MB
    // 97278898-4bd4-49c2-9889-aa5f969a7816-0020.driver.CodeGenerator.compilationTime
    // 97278898-4bd4-49c2-9889-aa5f969a7816-0020.driver.DAGScheduler.job.activeJobs
    // 97278898-4bd4-49c2-9889-aa5f969a7816-0020.driver.jvm.heap.committed
    {
      pattern = "^([^.]+)\\.(driver)\\.((CodeGenerator|DAGScheduler|BlockManager|jvm)\\..+[^_MB])(_MB)?"
      name = 3
      tags = {
        "appId" = 1
        "role"  = 2
      }
    },

    // STREAMING
    // Note: the .*Delay stats are derived from the .*Time stats. The time stats by themselves
    // aren't that useful sent to the backend.
    {
      pattern = "^([^.]+)\\.(driver)\\.([^.]+)\\.StreamingMetrics\\.(streaming\\..*)"
      name = 4
      tags = {
        "appId" = 1
        "role" = 2
      }
    }

  ]

  value-conversions = [
    {
      pattern = "^.*_MB$"
      factor = 1.0e6
    },
    {
      pattern = "^.*streaming.*_.*Time$"
      factor = 0.001
    },
    {
      pattern = "^.*streaming.*_.*Delay$"
      factor = 0.001
    }
  ]

  // Values that are reported as a guage, but are monotonically increasing and better mapped into
  // a counter for spectator.
  gauge-counters = "^.*streaming\\.total.*$"
}
