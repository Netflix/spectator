import java.util.zip.ZipFile

plugins {
  id 'com.github.johnrengelman.shadow' version '5.2.0'
}

dependencies {
  api project(':spectator-api')
  api project(':spectator-ext-ipc')
  implementation 'com.fasterxml.jackson.core:jackson-core'
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile'
  implementation 'javax.inject:javax.inject'
  jmh project(':spectator-api')
}

jar {
  // We only want to generate the shadow jar that hides the use of
  // Jackson to prevent issues with other uses
  enabled = false
  manifest {
    attributes(
      "Automatic-Module-Name": "com.netflix.spectator.atlas"
    )
  }
}
jar.dependsOn("checkShadowJar")

static boolean shouldBeShaded(String name) {
  name.startsWith("jackson-")
}

shadowJar {
  classifier = null
  configurations = [project.configurations.runtimeClasspath]
  dependencies {
    exclude(dependency {
      !shouldBeShaded(it.moduleName)
    })
  }
  minimize()
  exclude('module-info.class')
  exclude('META-INF/maven/com.fasterxml.jackson.*/**')
  exclude('META-INF/services/com.fasterxml.*')
  relocate('com.fasterxml.jackson', 'com.netflix.spectator.atlas.shaded.spectator-atlas.json')
}

// Remove the Jackson dependencies from the POM file
afterEvaluate {
  publishing {
    publications {
      withType(MavenPublication) {
        pom.withXml {
          asNode()
            .dependencies
            .dependency
            .findAll {
              shouldBeShaded(it.artifactId.text())
            }
            .each { it.parent().remove(it) }
        }
      }
    }
  }
}


// Sanity check the shadow jar to ensure something hasn't creeped in that is
// not properly relocated.
task checkShadowJar {
  doLast {
    configurations.archives.allArtifacts.forEach {
      if (it.name == "spectator-reg-atlas" && it.extension == "jar") {
        Set<String> metadataFiles = [
            "META-INF/LICENSE",
            "META-INF/MANIFEST.MF",
            "META-INF/NOTICE",
            "META-INF/services/com.netflix.spectator.api.Registry",
            "META-INF/spectator-reg-atlas.properties"
        ]
        ZipFile zf = new ZipFile(it.file)
        try {
          zf.stream()
            .filter { !it.directory }
            .filter { !it.name.startsWith("com/netflix/spectator/atlas/") }
            .filter { !metadataFiles.contains(it.name) }
            .forEach {
              throw new IllegalStateException(
                  "Unexpected file included in jar (${it.name}). Check shadow configuration.")
            }
        } finally {
          zf.close()
        }
      }
    }
  }
}
checkShadowJar.dependsOn(shadowJar)
