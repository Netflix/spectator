# Negative lookahead
E	abc(?!def)	abcdef
E	abc(?!def)	abcghi
# Positive lookahead
E	abc(?=def)	abcdef
E	abc(?=def)	abcghi
# Character classes
E	[abc]	a
E	[abc]	d
E	[^abc]	a
E	[^abc]	d
E	[^abc]	^
E	[abc^]	a
E	[abc^]	d
E	[abc^]	^
E	[a^bc]	a
E	[a^bc]	d
E	[a^bc]	^
E	[a-zA-Z]	A
E	[a-zA-Z]	a
E	[a-zA-Z]	x
E	[a-zA-Z]	X
E	[a-d[m-p]]	a
E	[a-d[m-p]]	e
E	[a-d[m-p]]	n
E	[a-z&&[def]]	a
E	[a-z&&[def]]	d
E	[a-z&&[def]]	x
E	[a-z&&[^bc]]	a
E	[a-z&&[^bc]]	b
E	[a-z&&[^bc]]	c
E	[a-z&&[^bc]]	d
E	[a-z&&[^m-p]]	a
E	[a-z&&[^m-p]]	m
E	[a-z&&[^m-p]]	q
E	[^c[a]]	c
# JDK8 a matches, on JDK11 it does not. For now we have JDK8 behavior and ignore
U	[^c[a]]	a
E	[^a-d[m-p]]	a
E	[^a-d[m-p]]	e
# JDK8 n matches, on JDK11 it does not. For now we have JDK8 behavior and ignore
U	[^a-d[m-p]]	n
E	[a-d[^m-p]]	a
E	[a-d[^m-p]]	e
E	[a-d[^m-p]]	n
# JDK8 a and e matches, on JDK11 it does not. For now we have JDK8 behavior and ignore
U	[^a-d[^m-p]]	a
U	[^a-d[^m-p]]	e
E	[^a-d[^m-p]]	n
E	[a-c&&g-i&&m-p]	b
E	[a-c&&g-i&&m-p]	g
E	[a-c&&g-i&&m-p]	p
E	[a-c&&g-i&&m-p]	&
E	[a-c&&[g-i]&&[m-p]]	b
E	[a-c&&[g-i]&&pm-p]]	g
E	[a-c&&[g-i]&&[m-p]]	p
E	[\w]	a
E	[\w]	!
E	[-\w]	a
E	[-\w]	-
E	[-\w]	!
E	[]\w]	a
E	[]\w]	!
E	[\t-\n]	a
E	[\t-\n]	-
E	[\t-\n]	!
E	[\t-\n]	\t
E	[a-z\d]	a
E	[a-z\d]	B
E	[a-z\d]	4
E	[a-z\d]	!
E	[a-z\dA-Z]	a
E	[a-z\dA-Z]	B
E	[a-z\dA-Z]	4
E	[a-z\dA-Z]	!
E	[A-\\]	A
E	[A-\\]	\
# Quantifiers
E	a?	aa
E	a?	b
E	a??	aa
E	a??	b
E	a?+	aa
E	a?+	b
E	a*	aa
E	a*	b
E	a*?	aa
E	a*?	b
E	a*+	aa
E	a*+	b
E	a+	aa
E	a+	b
E	a+?	aa
E	a+?	b
E	a++	aa
E	a++	b
E	a{2}?	aa
E	a{2}?	b
E	a{2,}?	aa
E	a{2,}?	b
E	a{1,3}?	aa
E	a{1,3}?	b
E	a{2}+	aa
E	a{2}+	b
E	a{2,}+	aa
E	a{2,}+	b
E	a{1,3}+	aa
E	a{1,3}+	b
