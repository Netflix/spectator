buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5'
  }
}

plugins {
  id 'nebula.netflixoss' version '3.1.1'
  id 'me.champeau.gradle.jmh' version '0.2.0'
}

// Establish version and status
ext.githubProjectName = 'spectator'

allprojects {
  apply plugin: 'project-report'
  apply plugin: 'me.champeau.gradle.jmh'
  apply plugin: 'com.github.ben-manes.versions'

  task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
  }
}

subprojects {
  apply plugin: 'nebula.netflixoss'
  apply plugin: 'java'
  apply plugin: 'build-dashboard'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'pmd'

  repositories {
    jcenter()
    mavenLocal()
  }

  group = "com.netflix.${githubProjectName}"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  project.tasks.withType(Javadoc) {
    if (JavaVersion.current().isJava8Compatible()) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
  javadoc {
    options {
      links = ['http://docs.oracle.com/javase/7/docs/api/']
    }
  }

  dependencies {
    compile "org.slf4j:slf4j-api:$version_slf4j"
    testCompile 'junit:junit:4.12'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:1.7.2'
    jmh "org.slf4j:slf4j-simple:$version_slf4j"
  }

  jmh {
    warmupIterations = 2
    iterations = 10
    fork = 5
    profilers = ['STACK']
    include '.*'
  }

  jacoco {
    toolVersion = "0.7.1.201405082137"
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
      xml.enabled false
      csv.enabled false
      html.destination "${buildDir}/reports/jacoco"
    }
  }
  
  checkstyle {
    toolVersion = '6.7'
    ignoreFailures = false 
    configFile = rootProject.file('codequality/checkstyle.xml')
    sourceSets = [sourceSets.main]
  }
  tasks.withType(Checkstyle) {
    exclude '**/tdunning/**'
  }
  
  findbugs {
    excludeFilter = rootProject.file('codequality/findbugs-exclude.xml')
    ignoreFailures = false
    sourceSets = [sourceSets.main]
  }
  tasks.withType(FindBugs) {
    findbugs.toolVersion "3.0.0"
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  pmd {
    toolVersion = '5.3.3'
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = rootProject.files("codequality/pmd.xml")
  }
  tasks.withType(Pmd) {
    exclude '**/tdunning/**'
  }

  task copyDepsToBuild << {
    ['compile', 'runtime', 'testCompile', 'testRuntime'].each { conf ->
      delete "${buildDir}/dependencies/${conf}"
      copy {
        from configurations[conf]
        into "${buildDir}/dependencies/${conf}"
      }
    }
  }
}

