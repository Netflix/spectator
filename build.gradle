buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'
    classpath 'com.netflix.nebula:nebula-dependency-recommender:9.0.1'
    classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:8.6.0'
  }
}

plugins {
  id 'me.champeau.gradle.jmh' version '0.5.0'
  id "com.github.spotbugs" version "3.0.0" apply false
}

// Establish version and status
ext.githubProjectName = 'spectator'

allprojects {
  apply plugin: 'nebula.dependency-recommender'
  apply plugin: 'project-report'
  apply plugin: 'me.champeau.gradle.jmh'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'nebula.netflixoss'
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'build-dashboard'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'

  repositories {
    jcenter()
    mavenLocal()
  }

  group = "com.netflix.${githubProjectName}"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  tasks {
    compileJava {
      options.encoding = 'UTF-8'
      // Generate java8 bytecode and compile against the java8 class
      // libraries.
      if (JavaVersion.current().isJava9Compatible()) {
        options.compilerArgs.addAll(['--release', '8'])
      }
    }
    compileTestJava {
      options.encoding = 'UTF-8'
      sourceCompatibility = JavaVersion.current()
      targetCompatibility = JavaVersion.current()
    }

    javadoc {
      if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  javadoc {
    options {
      links = ['http://docs.oracle.com/javase/8/docs/api/']
    }
  }

  dependencyRecommendations {
    propertiesFile file: new File(rootProject.projectDir, 'dependencies.properties')
  }

  dependencies {
    implementation "org.slf4j:slf4j-api"
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier'
    jmh "org.slf4j:slf4j-simple"
    jmh "org.openjdk.jmh:jmh-core:1.22"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:1.22"
  }

  test {
    useJUnitPlatform()
  }

  jmh {
    jmhVersion = '1.22'
    warmupIterations = 2
    iterations = 5
    fork = 1
    //threads = 1
    profilers = ['stack', 'gc']
    includeTests = false
    duplicateClassesStrategy = 'warn'
    include = ['.*Ids.*']
  }

  checkstyle {
    toolVersion = '8.28'
    ignoreFailures = false 
    configFile = rootProject.file('codequality/checkstyle.xml')
    sourceSets = [sourceSets.main]
  }
  
  spotbugs {
    toolVersion = '4.0.0-beta4'
    excludeFilter = rootProject.file('codequality/findbugs-exclude.xml')
    ignoreFailures = false
    sourceSets = [sourceSets.main]
  }
  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  pmd {
    toolVersion = '6.20.0'
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = rootProject.files("codequality/pmd.xml")
  }
}

