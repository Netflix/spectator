// Needed until shadow plugin is updated for JDK21. For more details see
// https://github.com/Netflix/spectator/issues/1113
buildscript {
  configurations.configureEach { configuration ->
    configuration.resolutionStrategy {
      eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.ow2.asm') {
          details.useVersion '9.6'
          details.because "Asm 9.6 is required for JDK 21+ support"
        }
      }
    }
  }
}

plugins {
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'com.github.spotbugs' version '5.2.5' apply false
  id "com.github.johnrengelman.shadow" version "8.1.1" apply false
  id 'me.champeau.jmh' version '0.7.2'
  id 'com.netflix.nebula.dependency-recommender' version '12.5.1'
  id 'com.netflix.nebula.netflixoss' version '11.6.0'
  // Need to override as transitive from netflixoss has git.user error
  id 'com.netflix.nebula.release' version '19.0.10'
}

// Establish version and status
ext.githubProjectName = 'spectator'

allprojects {
  apply plugin: 'project-report'
  apply plugin: 'me.champeau.jmh'
  apply plugin: 'com.github.ben-manes.versions'

  // Needs to be here to avoid problems with JMH plugin
  repositories {
    mavenCentral()
    mavenLocal()
  }
}

subprojects {
  apply plugin: 'com.netflix.nebula.dependency-recommender'
  apply plugin: 'com.netflix.nebula.netflixoss'
  apply plugin: 'java-library'
  apply plugin: 'build-dashboard'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'

  group = "com.netflix.${githubProjectName}"

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(8)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  tasks {
    javadoc {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

  javadoc {
    options {
      links = ['https://docs.oracle.com/javase/8/docs/api/']
    }
  }

  dependencyRecommendations {
    propertiesFile file: new File(rootProject.projectDir, 'dependencies.properties')
  }

  dependencies {
    implementation "org.slf4j:slf4j-api"
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier'
    jmh "org.slf4j:slf4j-simple"
    jmh "org.openjdk.jmh:jmh-core:1.37"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:1.37"
  }

  tasks.withType(Test) {
    useJUnitPlatform()
  }

  [17, 21, 23].each { additionalJDK ->
    def additionalTestTask = tasks.register("testJDK$additionalJDK", Test) {
      description = "Runs tests against JDK $additionalJDK."
      group = 'verification'

      testClassesDirs = sourceSets.test.output.classesDirs
      classpath = sourceSets.test.runtimeClasspath

      javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(additionalJDK)
      }
    }
    check.dependsOn additionalTestTask
  }

  jmh {
    jmhVersion = '1.37'
    warmupIterations = 2
    iterations = 5
    fork = 1
    //threads = 1
    profilers = ['stack', 'gc']
    includeTests = false
    duplicateClassesStrategy = DuplicatesStrategy.WARN
    includes = ['.*Ids.*']
  }

  checkstyle {
    toolVersion = '9.3'
    ignoreFailures = false 
    configFile = rootProject.file('codequality/checkstyle.xml')
    configDirectory = rootProject.file("codequality")
    sourceSets = [sourceSets.main]
  }
  
  spotbugs {
    toolVersion = '4.8.6'
    excludeFilter = rootProject.file('codequality/findbugs-exclude.xml')
    ignoreFailures = false
    spotbugsMain.enabled = true
    spotbugsTest.enabled = false
    spotbugsJmh.enabled = false
  }
  spotbugsMain {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  pmd {
    toolVersion = '6.55.0'
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = rootProject.files("codequality/pmd.xml")
  }
}

