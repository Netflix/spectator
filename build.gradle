plugins {
  id 'com.github.ben-manes.versions' version '0.44.0'
  id 'com.github.spotbugs' version '5.0.13' apply false
  id 'me.champeau.jmh' version '0.6.8'
  id 'com.netflix.nebula.dependency-recommender' version '12.2.0'
  id 'com.netflix.nebula.netflixoss' version '11.3.1'
}

// Establish version and status
ext.githubProjectName = 'spectator'

allprojects {
  apply plugin: 'project-report'
  apply plugin: 'me.champeau.jmh'
  apply plugin: 'com.github.ben-manes.versions'
}

subprojects {
  apply plugin: 'com.netflix.nebula.dependency-recommender'
  apply plugin: 'com.netflix.nebula.netflixoss'
  apply plugin: 'java-library'
  apply plugin: 'build-dashboard'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'

  repositories {
    mavenCentral()
    mavenLocal()
  }

  group = "com.netflix.${githubProjectName}"

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(8)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  tasks {
    javadoc {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

  javadoc {
    options {
      links = ['https://docs.oracle.com/javase/8/docs/api/']
    }
  }

  dependencyRecommendations {
    propertiesFile file: new File(rootProject.projectDir, 'dependencies.properties')
  }

  dependencies {
    implementation "org.slf4j:slf4j-api"
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier'
    jmh "org.slf4j:slf4j-simple"
    jmh "org.openjdk.jmh:jmh-core:1.36"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:1.36"
  }

  tasks.withType(Test) {
    useJUnitPlatform()
  }

  [17, 20].each { additionalJDK ->
    def additionalTestTask = tasks.register("testJDK$additionalJDK", Test) {
      description = "Runs tests against JDK $additionalJDK."
      group = 'verification'

      testClassesDirs = sourceSets.test.output.classesDirs
      classpath = sourceSets.test.runtimeClasspath

      javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(additionalJDK)
      }
    }
    check.dependsOn additionalTestTask
  }

  jmh {
    jmhVersion = '1.36'
    warmupIterations = 2
    iterations = 5
    fork = 1
    //threads = 1
    profilers = ['stack', 'gc']
    includeTests = false
    duplicateClassesStrategy = DuplicatesStrategy.WARN
    includes = ['.*Caching.*']
  }

  checkstyle {
    toolVersion = '9.3'
    ignoreFailures = false 
    configFile = rootProject.file('codequality/checkstyle.xml')
    sourceSets = [sourceSets.main]
  }
  
  spotbugs {
    toolVersion = '4.7.3'
    excludeFilter = rootProject.file('codequality/findbugs-exclude.xml')
    ignoreFailures = false
    spotbugsMain.enabled = true
    spotbugsTest.enabled = false
    spotbugsJmh.enabled = false
  }
  spotbugsMain {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  pmd {
    toolVersion = '6.37.0'
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = rootProject.files("codequality/pmd.xml")
  }
}

